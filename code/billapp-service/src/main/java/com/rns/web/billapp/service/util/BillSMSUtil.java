package com.rns.web.billapp.service.util;

import java.math.BigDecimal;
import java.net.URLEncoder;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;

import com.rns.web.billapp.service.bo.domain.BillInvoice;
import com.rns.web.billapp.service.bo.domain.BillItem;
import com.rns.web.billapp.service.bo.domain.BillUser;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;

public class BillSMSUtil implements BillConstants {
	
	private static final String SMS_COSMETIC_SEPARATOR = " ---------------- ";
	private static final String SMS_URL = "http://api.msg91.com/api/sendhttp.php?sender=PAYBIL&route=4&mobiles={mobiles}&authkey=193344AsiDSe0j5a5db681&country=0&message={message}";
	private static final String ADMIN_PHONES = "9923283604,9623736773"; 
	
	public static String sendSMS(BillUser user, BillInvoice invoice, String type) {
		String result = "";
		try {
			LoggingUtil.logMessage("Sending SMS to -- " + user.getPhone());
			
			result = generateResultMessage(user, invoice, type);
			ClientConfig config = new DefaultClientConfig();
			Client client = Client.create(config);
			String smsUrl = SMS_URL;
			smsUrl = StringUtils.replace(smsUrl, "{message}", URLEncoder.encode(result, "UTF-8"));
			
			if (StringUtils.contains(type, "Admin")) {
				smsUrl = StringUtils.replace(smsUrl, "{mobiles}", ADMIN_PHONES);
			} else {
				smsUrl = StringUtils.replace(smsUrl, "{mobiles}", user.getPhone());
			}
			
			WebResource webResource;
			webResource = client.resource(smsUrl);
			ClientResponse response = webResource.get(ClientResponse.class);
			String entity = response.getEntity(String.class);
			LoggingUtil.logMessage("SMS response -- " + entity);
		} catch (Exception e) {
			LoggingUtil.logError(ExceptionUtils.getStackTrace(e));
		}
		return result;
	}

	public static String generateResultMessage(BillUser user, BillInvoice invoice, String type) {
		String result;
		result = SMS_TEXT.get(type);
		
		if(user != null) {
			result = BillMailUtil.prepareUserInfo(result, user);
		}
		
		if(invoice != null) {
			result = BillMailUtil.prepareInvoiceInfo(result, invoice);
			if(StringUtils.equals(BillConstants.PAYMENT_STATUS_CREDIT, invoice.getStatus())) {
				result = StringUtils.replace(result, "{status}", "Successful");	
			} else {
				result = StringUtils.replace(result, "{status}", "Failed");	
			}
			
			if(CollectionUtils.isNotEmpty(invoice.getInvoiceItems())) {
				StringBuilder builder = new StringBuilder();
				builder.append(SMS_COSMETIC_SEPARATOR).append("\n");
				for(BillItem invoiceItem: invoice.getInvoiceItems()) {
					builder.append(CommonUtils.getStringValue(invoiceItem.getQuantity(), true)).append("  ");
					if(invoiceItem.getParentItem() != null) {
						builder.append(CommonUtils.getStringValue(invoiceItem.getParentItem().getName()));
					} else {
						builder.append(CommonUtils.getStringValue(invoiceItem.getName()));
					}
					builder.append(" = ").append(CommonUtils.getStringValue(invoiceItem.getPrice(), false));
					builder.append("\n");
				}
				builder.append(SMS_COSMETIC_SEPARATOR).append("\n");
				if(invoice.getPendingBalance() != null && BigDecimal.ZERO.compareTo(invoice.getPendingBalance()) < 0) {
					builder.append("Pending = ").append(CommonUtils.getStringValue(invoice.getPendingBalance(), false)).append("\n");;
				}
				if(invoice.getServiceCharge() != null && BigDecimal.ZERO.compareTo(invoice.getServiceCharge()) < 0) {
					builder.append("Service charge = ").append(CommonUtils.getStringValue(invoice.getServiceCharge(), false)).append("\n");;
				}
				if(invoice.getCreditBalance() != null && BigDecimal.ZERO.compareTo(invoice.getCreditBalance()) < 0) {
					builder.append("Credit = ").append(CommonUtils.getStringValue(invoice.getCreditBalance(), false)).append("\n");;
				}
				if(invoice.getOutstandingBalance() != null && BigDecimal.ZERO.compareTo(invoice.getOutstandingBalance()) < 0) {
					builder.append("Outstanding = ").append(CommonUtils.getStringValue(invoice.getOutstandingBalance(), false)).append("\n");;
				}
				builder.append(SMS_COSMETIC_SEPARATOR).append("\n");
				result = StringUtils.replace(result, "{smsInvoiceItems}", builder.toString());
			} else {
				result = StringUtils.replace(result, "{smsInvoiceItems}", "");
			}
			
		}
		return result;
	}
	
	private static Map<String, String> SMS_TEXT = Collections.unmodifiableMap(new HashMap<String, String>() {
		{
			put(MAIL_TYPE_INVOICE, "Your Invoice for {month} {year} of Rs. {payable} is generated by {businessName}. \n {smsInvoiceItems} Pay the invoice now by going to - {paymentUrl} ");
			put(MAIL_TYPE_PAYMENT_RESULT, "Your Bill payment for {month} {year} of Rs. {payable} to {businessName} is {status} \n Payment ID: {paymentId} \n Bill No: {invoiceId}");
			put(MAIL_TYPE_PAYMENT_RESULT_VENDOR, "The Bill payment for {month} {year} of Rs. {payable} by {name} is {status} \n Payment ID: {paymentId} \n Bill No: {invoiceId}");
			put(MAIL_TYPE_REGISTRATION, "Hello {name}! Welcome to Pay Per Bill family! Pay Per Bill will help your business to be more efficient and profitable by going online.");
			put(MAIL_TYPE_APPROVAL, "Congratulations {name}! Your Pay Per Bill account has been verified and approved! You can start accepting payments once you complete your bank details on the app.");
			put(MAIL_TYPE_NEW_CUSTOMER, "Hello {name}! {businessName} has added you as a customer to their Pay Per Bill account. You can start tracking and paying your {sector} bills online now. For more details - contact your vendor {vendorContact}");
			put(MAIL_TYPE_PAUSE_CUSTOMER, "Hello {name}! {businessName} has paused the delivery for {itemName} from {fromDate} to {toDate}.");
			put(MAIL_TYPE_PAUSE_BUSINESS, "Hello {name}! {businessName} has paused the delivery for {sector} from {fromDate} to {toDate}.");
			put(MAIL_TYPE_HOLIDAY, "Hello {name}! Your order from {businessName} for {sector} will not be delivered today due to a public holiday - {holidayName}");
			put(MAIL_TYPE_REGISTRATION_ADMIN, "We have a new registration - \n Name - {name} \n Email {email} \n Phone - {phone}");
			put(MAIL_TYPE_INVOICE_GENERATION, "Hi {name} ! Invoices generated for {month} {year}. Please review the invoices before sending out to customers. \n No of invoices = {amount} \n Amount raised = {payable}.");
			put(MAIL_TYPE_SETTLEMENT_SUMMARY, "Your settlement of Rs. {amount} is processed on {date}. Please check your email {email} for more details. \n Reference no - {settlementId}. \n Payment will be credited to your account in 24 hours.");
		}
	});
	
}
